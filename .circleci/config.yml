# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
orbs:
  gh: circleci/github-cli@2.5
  pca-bes: accedian/pca-bes@1.18.0

# Jobs
jobs:
  build:
    working_directory: ~/repo
    machine: true
    resource_class: accedian/prod_bes-ubuntu-medium

    environment:
      CGO_ENABLED: 1

    steps:
      - pca-bes/workspacesetup

      - run:
          name: "Create a temp directory for artifacts"
          command: |
            mkdir -p /tmp/artifacts

      - run:
          name: Building Docker Container
          command: make build

      - run:
          name: "install helm"
          command: |
            wget -LO helm.tar.gz https://get.helm.sh/helm-v3.17.2-linux-amd64.tar.gz  # legit:ignore-pipeline
            tar xf helm.tar.gz linux-amd64/helm
            sudo mv linux-amd64/helm /usr/local/bin
      - run:
          name: "make chart"
          command: |
            make helm 

  release:
    working_directory: ~/repo
    machine: true
    resource_class: accedian/prod_bes-ubuntu-medium
    steps:
      - pca-bes/workspacesetup
      - run:
          name: "Push image to GCR"
          env:
            C_BRANCH: "$CIRCLE_BRANCH"
            GC_SERVICE_KEY: "$GCLOUD_SERVICE_KEY"
            C_USERNAME: "$CIRCLE_USERNAME"
            GCR_KEY: "$GCR_DOCKER_RW_PASSWORD"
          command: |
            # SemVer Setup
            mkdir semver
            cd semver
            git clone https://github.com/Accedian/git-semver.git
            cd git-semver
            git checkout 3.0.1.5
            ./install.sh
            cd ~/repo

            # Docker Login
            echo "$GC_SERVICE_KEY" | base64 -d  > ${HOME}/gcloud-service-key.json
            docker login -u _json_key -p "$(echo $GCR_KEY)" https://gcr.io
            
            # Determine tagging strategy
            echo "Now Tagging"
            git config --global user.email "${C_USERNAME}@accedian.com"
            git config --global user.name "CircleCI"
            
            action=minor
            
            if [[ "${C_BRANCH}" =~ release/* ]]; then
              echo "Triggering a patch"
              action=patch
            else
              echo "Triggering a minor update"
              action=minor
            fi

            # Tag locally and export new version tag info
            git semver $action
            git describe --tags > current-version
            export DOCKER_VER=$(git semver get)
            export BINARY_VER=$(git semver get)
            git add current-version
            git commit --amend -m "$(git log --pretty=format:'%s' -n 1)"

            # Update master/release Accedian Repo tag & branch
            git push origin ${DOCKER_VER}
            git push origin ${C_BRANCH}

            # Run multi-platform builder & push to gcr.io
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker run --rm --privileged tonistiigi/binfmt:latest --install linux/amd64,linux/arm64/v8
            docker buildx create --name circleBuilder
            docker buildx use circleBuilder
            
            make push
            
            # echo "devhub docker login"
            # echo ${DEVHUB_TOKEN} | docker login -u ${DEVHUB_USER} --password-stdin https://artifactory.devhub-cloud.cisco.com
            # make circleci-devhubpush

            docker buildx rm circleBuilder

      - run:
          name: "install helm"
          command: |
            wget -LO helm.tar.gz https://get.helm.sh/helm-v3.17.2-linux-amd64.tar.gz  # legit:ignore-pipeline
            tar xf helm.tar.gz linux-amd64/helm
            sudo mv linux-amd64/helm /usr/local/bin
      - run:
          name: "login helm"
          command: |
            echo ${GCR_DOCKER_RW_PASSWORD} | base64 -d | docker login -u ${GCR_DOCKER_RW_USERNAME} --password-stdin https://us-docker.pkg.dev
      - run:
          name: "make chart"
          command: |
            export DOCKER_VER=$(git semver get)
            make helm-push DOCKER_VER=$DOCKER_VER 

workflows:
  version: 2.1
  build_only:
    when:
      not:
        and:
          - or:
            - equal: [master, << pipeline.git.branch >>]
            - equal: [main, << pipeline.git.branch >>]
            - matches:
                pattern: /release\/.*/
                value: << pipeline.git.branch >>
          - matches:
              pattern: "^https://github.com/[Aa]ccedian/.*"
              value: << pipeline.project.git_url >>

    jobs:
      - build:
          context: bes-builder-gcp-skybuilder-prd-51843

  build_and_release:
    when: 
      and:
        - or:
          - equal: [master, << pipeline.git.branch >>]
          - equal: [main, << pipeline.git.branch >>]
          - matches:
              pattern: /release\/.*/
              value: << pipeline.git.branch >>
        - matches:
            pattern: "^https://github.com/[Aa]ccedian/.*"
            value: << pipeline.project.git_url >>
    jobs:  
      - build:
          context: bes-builder-gcp-skybuilder-prd-51843
      - release:
          context: bes-builder-gcp-skybuilder-prd-51843
          requires:
            - build
          filters:
            branches:
              only: 
                - main
                - master       
                - /release\/.*/
      - pca-bes/image_signing:
          context: bes-builder-gcp-skybuilder-prd-51843
          requires:
            - release
          filters:
            branches:
              only:
                - main
                - master
                - /release\/.*/
