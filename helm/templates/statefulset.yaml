apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  name: {{ include "grafana.fullname" . }}
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
spec:
  {{- if not .Values.grafana.autoscaling.enabled }}
  replicas: {{ .Values.grafana.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "grafana.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "grafana.fullname" . }}
  template:
    metadata:
      {{- with .Values.grafana.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "grafana.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "grafana.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.grafana.podSecurityContext | nindent 8 }}
      imagePullSecrets: {{ toYaml .Values.global.images.pullSecrets | nindent 14 }}
    {{- if eq .Values.global.deployment_type "dev" }}
      nodeSelector:
        size: dev-pool
      tolerations:
      - effect: NoSchedule
        key: dedicated
        operator: Equal
        value: devpool
    {{- end }}        
      initContainers:
        - name: dashboard-setup
          image: {{ .Values.grafana.image.registry }}/{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
          command:
          - "/bin/sh"
          - "-c"
          - |
            # 1. Copy existing dashboards to temp location
            mkdir -p /temp-dashboards
            if [ -d "/tmp/dashboards" ] && [ "$(ls -A /tmp/dashboards 2>/dev/null)" ]; then
              cp -r /tmp/dashboards/* /temp-dashboards/ || echo "Warning: Some files might not have copied"
            fi
            
            # 2. Copy dashboards from config-data to the scratch disk
            mkdir -p /scratch-disk/dashboards
            if [ -d "/config-tmp/..data/" ] && [ "$(ls -A /config-tmp/..data/*.json 2>/dev/null)" ]; then
              cp -r /config-tmp/..data/*.json /scratch-disk/dashboards/ || echo "Warning: Some JSON files might not have copied"
            fi
            
            # 3. Copy temp dashboards to scratch disk as well
            if [ -d "/temp-dashboards" ] && [ "$(ls -A /temp-dashboards 2>/dev/null)" ]; then
              cp -r /temp-dashboards/* /scratch-disk/dashboards/ || echo "Warning: Some files from temp might not have copied"
            fi
            
            echo "Dashboard setup complete"
          volumeMounts:
            - name: dashboard-scratch
              mountPath: /scratch-disk
            - name: k8s-dashboards
              mountPath: /config-tmp
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.grafana.securityContext | nindent 12 }}
          image: {{ .Values.grafana.image.registry }}/{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            {{- toYaml .Values.grafana.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "grafana.fullname" . }}-config
          volumeMounts:
            - name: {{ include "grafana.fullname" . }}-data
              mountPath: /var/lib/grafana
            - name: prometheus-datasource
              mountPath: /tmp/provisioning/datasources/prometheus-datasource.yaml
              subPath: prometheus-datasource.yaml
            - name: k8s-dashboards
              mountPath: /config-tmp
            - name: dashboard-scratch
              mountPath: /tmp/dashboards
      volumes:
        - name: prometheus-datasource
          configMap:
            name: prometheus-datasource
        - name: k8s-dashboards
          configMap:
            name: k8s-dashboards
        - name: dashboard-scratch
          emptyDir: {}
        

      {{- with .Values.grafana.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.grafana.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.grafana.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
        - metadata:
            name: {{ include "grafana.fullname" . }}-data
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: {{ .Values.grafana.data_volume_size | default "50Gi"}}
